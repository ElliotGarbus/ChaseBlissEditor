# editor screen for Chase Bliss Editor
#: import CircleKnob circleknob

#: import cb cb_pedal_definitions
#: import CC cb_midi.CC
#: import PresetFile preset_file.PresetFile
#: import Factory kivy.factory.Factory
#: set white [1, 1, 1, 1]
#: set fs '20dp'

<CircleKnob>
    -arc_background: [.3, .3, .3, 1]
    -arc_foreground: white
    -text_color: white
    -font_size: fs

<Label>
    -font_size: fs

<Button>
    -font_size: fs

<Spinner>
    -font_size: fs

<FatalErrorPopup>:
    title: 'Fatal MIDI Error'
    size_hint: (.5,.5)
    auto_dismiss: False
    BoxLayout:
        orientation: 'vertical'
        Label:
            id: message
            text_size: self.size
            valign: 'middle'
            halign: 'center'
            font_size: '20sp'
        Button:
            size_hint_y: None
            height: dp(40)
            text: 'Exit'
            on_release: exit(-1)

<WritePresetDialog>
    title: 'Save a Preset to the ' + root.pedal_name
    size_hint: (.5,.5)
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: root.directions
            line_height: 1.25
        BoxLayout:
            size_hint_y: None
            height: dp(60)
            # padding: dp(7)
            spacing: dp(3)
            Button:
                text: 'Save Preset'
                on_release:
                    if preset_slot.text: app.cb_midi.pc(int(preset_slot.text))
                    root.dismiss()
            ProgramChangeInput:
                id:preset_slot
                text: root.preset_slot
                hint_text: '1 - 122'
                font_size: fs
                multiline: False
                halign: 'center'
                padding: ('6dp', (self.height / 2.0) - (self.line_height / 2.0))
            Button:
                text: 'Cancel'
                on_release: root.dismiss()

<ScreenTap@Screen>
    BoxLayout:
        Button:
            text: 'Tap'
            on_press:
                app.cb_midi.tap()
                bpm_input.text = ''
        BoxLayout:
            Label:
                text: 'BPM:'
            TapTextInput:
                id: bpm_input
                hint_text: '50 - 240'
                multiline: False
                padding: ('6dp', (self.height / 2.0) - (self.line_height / 2.0))
                halign: 'center'
                font_size: fs
        ToggleButton:
            id: bypass_stomp
            text: 'On' if self.state == 'down' else 'Bypassed'
            on_state:
                if self.state == 'down': app.cb_midi.cc(CC.bypass, 127)
                if self.state =='normal': app.cb_midi.cc(CC.bypass, 0)

<ScreenChannelSelect@Screen>
    left_stomp_name: 'initial'
    right_stomp_name: 'initial'
    text: 'initial'
    BoxLayout:
        ToggleButton:
            id: left_stomp
            text: root.left_stomp_name + (' On' if self.state == 'down' else ' Off')
            on_state:
                code = 0 if self.state == 'normal'else 1
                code += 0 if right_stomp.state == 'normal'else 2
                app.cb_midi.cc(CC.channel_select, (0, 45, 85, 127)[code])
        Label:
            text: root.text
        ToggleButton:
            id: right_stomp
            text:  root.right_stomp_name + (' On' if self.state == 'down' else ' Off')
            on_state:
                code = 0 if left_stomp.state == 'normal'else 1
                code += 0 if self.state == 'normal'else 2
                app.cb_midi.cc(CC.channel_select, (0, 45, 85, 127)[code])

Editor:
    padding: '10dp'
    spacing: '10dp'
    BoxLayout: # Left side Controls
        size_hint_x: .4
        padding: '10dp'
        canvas:
            Color:
                rgb: (1, 1, 1)
            Line:
                width:dp(2)
                rounded_rectangle: (*self.pos,self.width + 2,self.height, 2)
        orientation: 'vertical'
        BoxLayout:
            orientation: 'vertical'
            BoxLayout:
                Button:
                    text: 'Open File'
                    on_release: app.preset_file.open()
                Button:
                    text: 'Save File'
                    on_release: app.preset_file.save()
            BoxLayout:
                Label:
                    text: 'Name:'
                Label:
                    id: patch_filename
                    text: 'UNTITLED'
                    shorten: True
                    text_size: self.size
                    valign: 'center'
                    halign: 'center'
            BoxLayout:
                Label:
                    text: 'Device:'
                Spinner:
                    id: devices
                    text: 'Thermae'
                    values: root.pedal_names
                    on_text:
                        root.pedal = self.text
                        if cb.pedals[root.pedal].tap: sm.current = 'tap_bpm'
                        if not cb.pedals[root.pedal].tap: sm.current = 'channel_select'
            BoxLayout:
                Label:
                    text: 'MIDI Out:'
                Spinner:
                    text: 'Select MIDI'
                    values: app.cb_midi.midi_out_names
                    on_text: app.cb_midi.set_midi(self.text)
                    shorten: True
                    text_size: self.size
                    valign: 'center'
                    halign: 'center'
            BoxLayout:
                Label:
                    text: 'MIDI Ch:'
                Spinner:
                    text: '2'
                    values: [str(x) for x in range(1, 17)]
                    on_text: app.cb_midi.midi_channel = int(self.text) - 1
            BoxLayout:
                Button:
                    text: 'Recall Preset'
                    on_release: if pc_input.text: app.cb_midi.pc(int(pc_input.text))
                ProgramChangeInput:
                    id: pc_input
                    hint_text: '0 - 122'
                    font_size: fs
                    multiline: False
                    halign: 'center'
                    padding: ('6dp', (self.height / 2.0) - (self.line_height / 2.0))
            Button:
                text:'Save Preset to ' + root.pedal
                on_release: Factory.WritePresetDialog(pedal_name=root.pedal, preset_slot=pc_input.text).open()

        Label:
            size_hint_y: .4
            font_size: '15dp'
            text: 'Directions go here'

    BoxLayout: # Right Side Controls
        orientation: 'vertical'
        padding: '10dp'
        canvas:
            Color:
                rgb: (1, 1, 1)
            Line:
                width:dp(2)
                rounded_rectangle: (*self.pos,self.width + 2,self.height, 2)
            Color:
                rgb: cb.pedals[root.pedal].color
            Rectangle:
                size: self.size
                pos: self.pos
        GridLayout:
            cols: 3
            rows: 3
            spacing: '7dp'
            CircleKnob:
                id: cc20
                text: cb.pedals[root.pedal].cc20
                disabled: cb.pedals[root.pedal].cc20 != 'Ramp'
                on_value: app.cb_midi.cc(CC.cc20, self.value)
            Image:
                source: cb.pedals[root.pedal].logo
                allow_stretch: True

            BoxLayout:
                Label:
                    size_hint_x: .2
                BoxLayout:
                    orientation: 'vertical'
                    Button:
                        text:'Initialize Patch'
                        on_release: root.initialize_patch()
                    Button:
                        text:'Send to ' + root.pedal
                        shorten: True
                        text_size: self.size
                        valign: 'center'
                        halign: 'center'
                        on_release: root.send_all_knobs()
                Label:
                    size_hint_x: .2

            CircleKnob:
                id:cc14
                text:cb.pedals[root.pedal].cc14
                on_value: app.cb_midi.cc(CC.cc14, self.value)
            CircleKnob:
                id: cc15
                text: cb.pedals[root.pedal].cc15
                on_value: app.cb_midi.cc(CC.cc15, self.value)
            CircleKnob:
                id: cc16
                text: cb.pedals[root.pedal].cc16
                on_value: app.cb_midi.cc(CC.cc16, self.value)
            CircleKnob:
                id: cc17
                text: cb.pedals[root.pedal].cc17
                on_value: app.cb_midi.cc(CC.cc17, self.value)
            CircleKnob:
                id: cc18
                text: cb.pedals[root.pedal].cc18
                on_value: app.cb_midi.cc(CC.cc18, self.value)
            CircleKnob:
                id: cc19
                text: cb.pedals[root.pedal].cc19
                on_value: app.cb_midi.cc(CC.cc19, self.value)
        BoxLayout:
            size_hint_y: .25
            orientation: 'vertical'
            BoxLayout:  # 3 switches
                Spinner:
                    id: cc21
                    text_autoupdate: True
                    values: cb.pedals[root.pedal].cc21
                    on_text:
                        app.cb_midi.cc(CC.cc21, cb.pedals[root.pedal].cc21.index(self.text) + cb.pedals[root.pedal].cc21_offset)
                Spinner:
                    id: cc22
                    text_autoupdate: True
                    values: cb.pedals[root.pedal].cc22
                    disabled: cb.pedals[root.pedal].cc22_disabled
                    on_text:
                        app.cb_midi.cc(CC.cc22, cb.pedals[root.pedal].cc22.index(self.text) + 1)
                Spinner:
                    id: cc23
                    text_autoupdate: True
                    values: cb.pedals[root.pedal].cc23
                    disabled: cb.pedals[root.pedal].cc23_disabled
                    on_text:
                        app.cb_midi.cc(CC.cc23, cb.pedals[root.pedal].cc23.index(self.text) + 1)
            BoxLayout:
                ScreenManager:
                    id: sm
                    ScreenTap:
                        name: 'tap_bpm'
                        on_enter: app.cb_midi.cc(CC.bypass, 0)
                    ScreenChannelSelect:
                        name:'channel_select'
                        text: cb.pedals[root.pedal].name
                        left_stomp_name: cb.pedals[root.pedal].left_channel
                        right_stomp_name: cb.pedals[root.pedal].right_channel
                        on_enter: app.cb_midi.cc(CC.channel_select, 0)
        TextInput:
            id: notes
            size_hint_y: .5
            hint_text: 'Patch Notes, include dip switch settings and other notes.  Dip switches are not saved in the preset.'




